# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

a=["aman","kumar"]
a[0]

tuple=1,2,3,4,5
tuple
tuple[1]=5

extenstion={'aman':1,'sanu':"brother"}
extenstion.keys()

greeting='      hello'
greeting.strip()

greeting.upper()

for i in range(len(greeting)):
    print(greeting[i].replace("e","i"))
    
    import pandas as pd
    import numpy as nm
    
    
    
    dates = pd.date_range('20130101', periods=6)
    dates.dtype
    df = pd.DataFrame(nm.random.randn(6,4), columns=list('ABCD'))
    y=pd.DataFrame(nm.random.randn(6,6),columns=list('ABCDEF'))
    
    df2 = pd.DataFrame({ 'A' : 1.,
                      'B' : pd.date_range('20130101', periods=4),
                       'C' : pd.Series(1,index=list(range(4)),dtype='float32'),
                       'D' : nm.array([3] * 4,dtype='int32'),
                     'E' : pd.Categorical(["test","train","test","train"]),
                      'F' : 'foo' })
    
    df2.tail()
    df2.head()
    df2.isnull().sum()
    df2['A'].fillna(df2['A'].mean())
    
   
    df2.columns
    df2.index
    df2.describe()
    df2.T
    df2.sort_index(axis=0,ascending=False)
    df2.sort_values(by="B",ascending=False)
    df2[0:3]
    df2.loc[ : ,['A','B']]
    df2.iloc[0:3,0:2]
    df2.iloc[0,0]
    df2[df2.C>0]
    df=df2.copy()
    df['E']=[1,2,3,-1]
    df[df['E'].isin([3,-1])]
    df['G']=nm.array([5,6,7,8])
    df.dropna()
    df.fillna(value=5)
    df.isnull().sum()
    df.mean(0)
    df.mean(1)
    df.apply(nm.cumsum)
    df.apply(lambda:x x.max()-x.min())
    df['G'].value_counts()
    s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', nm.nan, 'CABA', 'dog', 'cat'])
    s.str.lower()
    df = pd.DataFrame(nm.random.randn(10, 4))    
    pieces = [df[:3], df[3:7], df[7:]]
    pd.concat(pieces)
    
    left=pd.DataFrame({'A':[1,2],'B':[2,3],'C':[3,4]})
    right=pd.DataFrame({'A':[1,2],'B':[3,3],'C':[3,5]})
    pd.merge(left,right,on='A')
    left.append(right)
    
    df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
                         'foo', 'bar', 'foo', 'foo'],
                   'B' : ['one', 'one', 'two', 'three',
                          'two', 'two', 'one', 'three'],
                     'C' : nm.random.randn(8),
                   'D' : nm.random.randn(8)})
    
    df.groupby('A').mean()
    df.T
    df.groupby(['B','A']).sum()
    
     df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
                        'B' : ['A', 'B', 'C'] * 4,
                        'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,
                      'D' : nm.random.randn(12),
                        'E' : nm.random.randn(12)})
     
     df.dtypes
     
     df['A']=df['A'].astype("category")
     df.groupby('A').size()
     df.sort_values('B',ascending=False)
     df['D'].plot()
     
     df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,
                      columns=['A', 'B', 'C', 'D'])
     df.plot(x='D',y='E',kind="hist")
     df.legend()
     
     
     pd.pivot_table(df,values='D',index=['A','B'],columns='C')
     
     loan=pd.read_csv('C:/Users/Aman Kumar/Desktop/train.csv')
     loan.columns
     
     loan.boxplot('LoanAmount',by='Gender')
     loan['LoanAmount'].plot(kind='hist')
     loan['Property_Area'].value_counts()
     loan['ApplicantIncome'].hist(bins=50)
     loan.isnull().sum()
     loan.corr()
     
     z=loan.ix[:,['Gender','Education','Married','Property_Area','Self_Employed','Loan_Status']]
    for i in range(len(z.columns)):
        {
           
        dummies=pd.get_dummies(z.ix[:,0])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
        }
      dummies=pd.get_dummies(z.ix[:,0])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
      dummies=pd.get_dummies(z.ix[:,1])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
      dummies=pd.get_dummies(z.ix[:,2])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
      dummies=pd.get_dummies(z.ix[:,3])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
      dummies=pd.get_dummies(z.ix[:,4])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
      dummies=pd.get_dummies(z.ix[:,5])
      frames=[loan,dummies]
      loan=pd.concat(frames,axis=1)
      
    y=['Gender','Education','Married','Property_Area']

  loan = loan.drop('Married', 1)
  loan = loan.drop('Gender', 1)
  loan = loan.drop('Education', 1)
  loan = loan.drop('Property_Area', 1)
  loan = loan.drop('Loan_ID', 1)
  loan=loan.drop('Self_Employed',1)
  loan=loan.drop('Loan_Status',1)
  loan.columns
  loan.dtypes
      
    for i in len(y):
        {
             loan = loan.drop(y[i], 1)
        }
   
      
      
      
      
     dummies=as
     dummies.dtypes
     loan.columns
    frames = [loan, dummies]
    result = pd.concat(frames,axis=1)
    result.dtypes
     loan['Gender'=='Male']==1
     x.dtypes
     loan.dtypes
     loan.isnull().sum()
     musk=loan.iloc[:,5].isnull()
     xtrain=loan[~musk]
     xtest=loan[musk]
     xtest.shape
     x=xtrain.iloc[:,[1,2,6,7,8,9,10,11,12]]
     y=xtrain.iloc[:,5]
     xt=xtest.iloc[:,[1,2,6,7,8,9,10,11,12]]


     from sklearn import tree
     model1 = tree.DecisionTreeClassifier()
     model1.fit(x,y)
     xt['Credit_History']=model1.predict(xt)
     frames = [x,y]

    x = pd.concat(frames,axis=1)
    frames = [x,xt]
    x = pd.concat(frames,axis=0)
    x.isnull().sum()
    frames = [x,loan.ix[:,4]]
    x = pd.concat(frames,axis=1)
    
    
    
    x.columns
     musk=x.iloc[:,10].isnull()
     xtrain=x[~musk]
     xtest=x[musk]
     
     x=xtrain.iloc[:,[0,1,2,3,4,5,6,7,8,9]]
     y=xtrain.iloc[:,10]
     xt=xtest.iloc[:,[0,1,2,3,4,5,6,7,8,9]]

     from sklearn import tree
     model1 = tree.DecisionTreeClassifier()
     model1.fit(x,y)
     xt['Loan_Amount_Term']=model1.predict(xt)
     
     
     
     frames = [x,y]
     x = pd.concat(frames,axis=1)
    frames = [x,xt]
    x = pd.concat(frames,axis=0)
    x.isnull().sum()
    
    frames = [x,loan.ix[:,3]]
    x = pd.concat(frames,axis=1)
    x.isnull().sum()
    
    x.columns
     musk=x.iloc[:,11].isnull()
     xtrain=x[~musk]
     xtest=x[musk]
     
     x=xtrain.iloc[:,[0,1,2,3,4,5,6,7,8,9,10]]
     y=xtrain.iloc[:,11]
     xt=xtest.iloc[:,[0,1,2,3,4,5,6,7,8,9,10]]

       from sklearn import tree
       model1 = tree.DecisionTreeClassifier()
       model1.fit(x,y)
       xt['LoanAmount']=model1.predict(xt)
     
     
     
     frames = [x,y]
     x = pd.concat(frames,axis=1)
    frames = [x,xt]
    x = pd.concat(frames,axis=0)
    x.isnull().sum()
    
    frames = [x,loan.ix[:,0]]
    x = pd.concat(frames,axis=1)
    x.isnull().sum()
    
    x.columns
     musk=x.iloc[:,12].isnull()
     xtrain=x[~musk]
     xtest=x[musk]
     
     x=xtrain.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11]]
     y=xtrain.iloc[:,12]
     xt=xtest.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11]]

       from sklearn import tree
       model1 = tree.DecisionTreeClassifier()
       model1.fit(x,y)
       xt['Dependents']=model1.predict(xt)
     
     
     
     frames = [x,y]
     x = pd.concat(frames,axis=1)
    frames = [x,xt]
    x = pd.concat(frames,axis=0)
    x.isnull().sum()
    
    
     

    
    
    
    
    
